(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{357:function(t,a,s){"use strict";s.r(a);var n=s(10),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_3-隐式类型转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-隐式类型转换"}},[t._v("#")]),t._v(" 3.隐式类型转换")]),t._v(" "),a("h2",{attrs:{id:"一、双等号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、双等号"}},[t._v("#")]),t._v(" 一、双等号==")]),t._v(" "),a("h3",{attrs:{id:"_1-是否有-nan"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-是否有-nan"}},[t._v("#")]),t._v(" 1.是否有 NaN")]),t._v(" "),a("p",[t._v("首先判断双等号两边是否有 NaN，如果有的话，则一律返回 false。")]),t._v(" "),a("ul",[a("li",[t._v("NaN 连自身都不相等："),a("code",[t._v("NaN != NaN")])])]),t._v(" "),a("h3",{attrs:{id:"_2-是否有-boolean-值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-是否有-boolean-值"}},[t._v("#")]),t._v(" 2.是否有 boolean 值")]),t._v(" "),a("ul",[a("li",[t._v("如果有的话则"),a("strong",[t._v("将 true 转化为 1，false 转化为 0。")])])]),t._v(" "),a("h3",{attrs:{id:"_3-null-和-undefined"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-null-和-undefined"}},[t._v("#")]),t._v(" 3.null 和 undefined")]),t._v(" "),a("p",[t._v("遇到 null 或者 undefined，则不会进行类型转换，它们相互的比较都返回 true。")]),t._v(" "),a("ul",[a("li",[t._v("除此之外，null 和 undefined 跟其他元素比较都是 false。")])]),t._v(" "),a("h3",{attrs:{id:"_4-有一边是字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-有一边是字符串"}},[t._v("#")]),t._v(" 4.有一边是字符串")]),t._v(" "),a("p",[t._v("另外一边分四种情况：")]),t._v(" "),a("p",[t._v("1） 同样是字符串，则直接进行字符串值的比较")]),t._v(" "),a("p",[t._v("2） 是数字，则需要将字符串转化为数字，然后进行比较。如"),a("code",[t._v('"1" == 1')]),t._v("，"),a("code",[t._v("011==11")]),t._v("(前置 0 没了)")]),t._v(" "),a("p",[t._v("3） 有布尔类型，则要将布尔类型转化为 0 或者 1，然后进行比较。")]),t._v(" "),a("ul",[a("li",[t._v("注意：除了 "),a("code",[t._v("1==true,0==false")]),t._v("， 其他都和布尔值不同。")])]),t._v(" "),a("p",[t._v("4） "),a("strong",[t._v("对象或者数组类型，则需要调用 toString()或者 valueOf()方法转化成简单类型，然后进行比较")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("对象转化为简单类型时会优先调用 valueOf 方法，如果可以与简单值进行比较则会直接比较，此时不再调用 toString 方法。")])]),t._v(" "),a("li",[a("p",[t._v("如果调用 valueOf 方法后无法与简单值进行比较，则会再调用 toString 方法，最终得到比对的结果。")])]),t._v(" "),a("li",[a("p",[t._v("但是需要注意的一点是 Date 对象不满足上述的规则，Date 对象的 toString 和 valueOf 方法都是重新定义过的，默认会调用 toString 方法。")])])]),t._v(" "),a("p",[t._v("如：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//得到"" ,""==0。所以[]==0==false=="" 。')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//过程可以看作[].toString() => "" => "" == 0 => 0 == false')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//"[object Object]"  所以{}和其他的基本类型都不相等，甚至{}!={}。')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2021")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("，"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2021")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//结果： a != b")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//其实 [] != [] ,{} !={}。因为引用类型都是栈存放的引用地址。看上去两个相同，但是他们的引用地址不同。")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("h2",{attrs:{id:"二、if-里面的条件判断。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、if-里面的条件判断。"}},[t._v("#")]),t._v(" 二、if（ ）里面的条件判断。")]),t._v(" "),a("ul",[a("li",[t._v("五种类型才会判定为 false："),a("code",[t._v('0、""、 NaN 、 undefined 、null')]),t._v("。"),a("code",[t._v("[ ]和{}都会判定为true")]),t._v("。")]),t._v(" "),a("li",[t._v("有趣的是，判定为 false 都是基本类型,而在非严格模式下，undefined == null，所以只算是四种。")])])])}),[],!1,null,null,null);a.default=e.exports}}]);