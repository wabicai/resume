(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{332:function(t,s,a){"use strict";a.r(s);var n=a(14),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"一、双等号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、双等号"}},[t._v("#")]),t._v(" 一、双等号==")]),t._v(" "),s("h3",{attrs:{id:"_1-是否有nan"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-是否有nan"}},[t._v("#")]),t._v(" 1.是否有NaN")]),t._v(" "),s("p",[t._v("首先判断双等号两边是否有NaN，如果有的话，则一律返回false。")]),t._v(" "),s("ul",[s("li",[t._v("NaN连自身都不相等："),s("code",[t._v("NaN != NaN")])])]),t._v(" "),s("h3",{attrs:{id:"_2-是否有boolean值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-是否有boolean值"}},[t._v("#")]),t._v(" 2.是否有boolean值")]),t._v(" "),s("ul",[s("li",[t._v("如果有的话则"),s("strong",[t._v("将true转化为1，false转化为0。")])])]),t._v(" "),s("h3",{attrs:{id:"_3-null和undefined"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-null和undefined"}},[t._v("#")]),t._v(" 3.null和undefined")]),t._v(" "),s("p",[t._v("遇到null或者undefined，则不会进行类型转换，它们相互的比较都返回true。")]),t._v(" "),s("ul",[s("li",[t._v("除此之外，null和undefined跟其他元素比较都是false。")])]),t._v(" "),s("h3",{attrs:{id:"_4-有一边是字符串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-有一边是字符串"}},[t._v("#")]),t._v(" 4.有一边是字符串")]),t._v(" "),s("p",[t._v("另外一边分四种情况：")]),t._v(" "),s("p",[t._v("1） 同样是字符串，则直接进行字符串值的比较")]),t._v(" "),s("p",[t._v("2） 是数字，则需要将字符串转化为数字，然后进行比较。如"),s("code",[t._v('"1" == 1')]),t._v("，"),s("code",[t._v("011==11")]),t._v("(前置0没了)")]),t._v(" "),s("p",[t._v("3） 有布尔类型，则要将布尔类型转化为0或者1，然后进行比较。")]),t._v(" "),s("ul",[s("li",[t._v("注意：除了 "),s("code",[t._v("1==true,0==false")]),t._v("， 其他都和布尔值不同。")])]),t._v(" "),s("p",[t._v("4） "),s("strong",[t._v("对象或者数组类型，则需要调用toString()或者valueOf()方法转化成简单类型，然后进行比较")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("对象转化为简单类型时会优先调用valueOf方法，如果可以与简单值进行比较则会直接比较，此时不再调用toString方法。")])]),t._v(" "),s("li",[s("p",[t._v("如果调用valueOf方法后无法与简单值进行比较，则会再调用toString方法，最终得到比对的结果。")])]),t._v(" "),s("li",[s("p",[t._v("但是需要注意的一点是Date对象不满足上述的规则，Date对象的toString和valueOf方法都是重新定义过的，默认会调用toString方法。")])])]),t._v(" "),s("p",[t._v("如：")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//得到"" ,""==0。所以[]==0==false=="" 。')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//过程可以看作[].toString() => "" => "" == 0 => 0 == false')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//"[object Object]"  所以{}和其他的基本类型都不相等，甚至{}!={}。')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Date")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2021")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("，"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Date")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2021")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//结果： a != b")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//其实 [] != [] ,{} !={}。因为引用类型都是栈存放的引用地址。看上去两个相同，但是他们的引用地址不同。")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("h2",{attrs:{id:"二、if-里面的条件判断。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、if-里面的条件判断。"}},[t._v("#")]),t._v(" 二、if（ ）里面的条件判断。")]),t._v(" "),s("ul",[s("li",[t._v("五种类型才会判定为false："),s("code",[t._v('0、""、 NaN 、 undefined 、null')]),t._v("。"),s("code",[t._v("[ ]和{}都会判定为true")]),t._v("。")]),t._v(" "),s("li",[t._v("有趣的是，判定为false都是基本类型,而在非严格模式下，undefined == null，所以只算是四种。")])])])}),[],!1,null,null,null);s.default=e.exports}}]);