(window.webpackJsonp=window.webpackJsonp||[]).push([[86],{384:function(e,n,r){"use strict";r.r(n);var t=r(10),i=Object(t.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"_4-类型工具"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-类型工具"}},[e._v("#")]),e._v(" 4.类型工具")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("Partial"),n("T",[e._v(": 创建一个类型，其中所有属性都是可选的。例如，Partial<{ name: string, age: number }> 将生成一个类型 { name?: string, age?: number }。")])],1)]),e._v(" "),n("li",[n("p",[e._v("Required"),n("T",[e._v(": 创建一个类型，其中所有属性都是必需的。例如，Required<{ name?: string, age?: number }> 将生成一个类型 { name: string, age: number }。")])],1)]),e._v(" "),n("li",[n("p",[e._v("Pick<T, K>: 从类型 T 中选择指定的属性集合 K。例如，Pick<{ name: string, age: number }, 'name'> 将生成一个类型 { name: string }。")])]),e._v(" "),n("li",[n("p",[e._v("Omit<T, K>: 从类型 T 中排除指定的属性集合 K。例如，Omit<{ name: string, age: number }, 'name'> 将生成一个类型 { age: number }。")])]),e._v(" "),n("li",[n("p",[e._v("Record<K, T>: 创建一个具有键类型 K 和值类型 T 的对象类型。例如，Record<string, number> 将生成一个类型，其键是字符串，值是数字的对象类型。")])]),e._v(" "),n("li",[n("p",[e._v("Exclude<T, U>: 从类型 T 中排除可以赋值给 U 的类型。例如，Exclude<string | number, number> 将生成一个类型 string。")])]),e._v(" "),n("li",[n("p",[e._v("Extract<T, U>: 从类型 T 中提取可以赋值给 U 的类型。例如，Extract<string | number, number> 将生成一个类型 number。")])]),e._v(" "),n("li",[n("p",[e._v("NonNullable"),n("T",[e._v(": 从类型 T 中排除 null 和 undefined。例如，NonNullable<string | null | undefined> 将生成一个类型 string。")])],1)]),e._v(" "),n("li",[n("p",[e._v("ReturnType"),n("T",[e._v(": 获取函数类型 T 的返回类型。例如，ReturnType<() => string> 将生成一个类型 string。")])],1)]),e._v(" "),n("li",[n("p",[e._v("Parameters"),n("T",[e._v(": 获取函数类型 T 的参数类型元组。例如，Parameters<(x: number, y: string) => void> 将生成一个类型 [number, string]。")])],1)])])])}),[],!1,null,null,null);n.default=i.exports}}]);