(window.webpackJsonp=window.webpackJsonp||[]).push([[135],{419:function(t,a,_){"use strict";_.r(a);var v=_(10),e=Object(v.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"doctype"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#doctype"}},[t._v("#")]),t._v(" Doctype")]),t._v(" "),a("p",[t._v("< Doctype > 标签申明位于文档的开头，用于告诉浏览器以什么样的方式来渲染页面，有混杂模式和严格模式两种")]),t._v(" "),a("p",[a("strong",[t._v("混杂模式")]),t._v("向后兼容，模拟老浏览器，防止浏览器版本过旧不兼容页面")]),t._v(" "),a("p",[a("strong",[t._v("严格模式")]),t._v("是将JS和排版以浏览器最高的标准运行")]),t._v(" "),a("h2",{attrs:{id:"一、缓存的规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、缓存的规则"}},[t._v("#")]),t._v(" 一、缓存的规则")]),t._v(" "),a("p",[t._v("结论提前说:")]),t._v(" "),a("ol",[a("li",[t._v("强缓存\n"),a("ol",[a("li",[a("strong",[t._v("Expires")]),t._v("：Thu，15 Apr  2010  20：00：00  GMT， 依赖客户端时间，会有问题。（客户端服务端时间不同步、浪涌现象）")]),t._v(" "),a("li",[a("strong",[t._v("Cache-Control")]),t._v("：max-age=315360000, public 在本地内存里面读取到上一次发送的HTTP请求里面的响应头的数据。没过期就直接用，不依赖客户端时间。状态码： 200（from cache)\n"),a("ol",[a("li",[t._v("no-cache 走协商缓存")]),t._v(" "),a("li",[t._v("no-store 直接不使用缓存，请求最新的")]),t._v(" "),a("li",[t._v("二者存在会忽略max-age，会与服务器交互。")])])])])]),t._v(" "),a("li",[t._v("客户端发送"),a("strong",[t._v("Etag / Last-Modified")]),t._v("到服务器，服务器进行判断，在服务端设置：（If-None-Match：Etag是否相同  / if-Modified-Since 是否修改 ），然后 （新内容 200，旧内容 304）\n"),a("ol",[a("li",[t._v("last-modified缺点：\n"),a("ol",[a("li",[t._v("只要编辑了，不管内容是否变更都会当成新资源返回")]),t._v(" "),a("li",[t._v("时间精确到秒，一秒内的修改是检测不到更新的，仍会告知浏览器使用旧缓存")])])])])]),t._v(" "),a("li",[t._v("浏览器的三级缓存原理：\n"),a("ol",[a("li",[t._v("先去内存看，如果有，直接加载")]),t._v(" "),a("li",[t._v("如果内存没有，择取硬盘获取，如果有直接加载")]),t._v(" "),a("li",[t._v("如果硬盘也没有，那么就进行网络请求")]),t._v(" "),a("li",[t._v("加载到的资源缓存到硬盘和内存")])])])]),t._v(" "),a("blockquote",[a("p",[t._v("HTTP的缓存属于客户端缓存，用于储存一些不经常变化的静态文件（图片、css、js等）。我们将缓存分为强制缓存和协商缓存")])]),t._v(" "),a("p",[t._v("服务器上的数据是会有更新的，我们不能一直使用浏览器的本地缓存，这样就只能一直使用旧数据。我们希望当服务器的数据发生更新时，浏览器会请求更新数据，如果服务器上的数据没有更新我们就使用本地数据，这样能节省因网络请求而产生的资源浪费。\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210308194202184.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FidWFuZGVu,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}}),t._v("\n明确两点：")]),t._v(" "),a("p",[t._v("1、"),a("strong",[t._v("浏览器每次发起请求，都会先在浏览器缓存中查找该请求的结果以及缓存标识")])]),t._v(" "),a("p",[t._v("2、"),a("strong",[t._v("浏览器每次拿到返回的请求结果都会将该结果和缓存标识存入浏览器缓存中")]),t._v(" "),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210308194235693.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FidWFuZGVu,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),t._v(" "),a("h4",{attrs:{id:"_1、强制缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、强制缓存"}},[t._v("#")]),t._v(" 1、强制缓存")]),t._v(" "),a("p",[t._v("当缓存数据库中已有所请求的数据时。客户端直接从缓存数据库中获取数据。当缓存数据库中没有所请求的数据时，客户端的才会从服务端获取数据。")]),t._v(" "),a("p",[t._v("（虽然没有发出真实的 "),a("code",[t._v("http")]),t._v(" 请求）请求状态码返回是 "),a("code",[t._v("200")])]),t._v(" "),a("blockquote",[a("p",[t._v("关键词："),a("strong",[t._v("不发送请求")])]),t._v(" "),a("p",[t._v("强缓存就是强制缓存，直接读取浏览器缓存。如果在服务器响应的头部字段中设置了"),a("strong",[t._v("cache-control：max-age=xxx，public/private/immutable")]),t._v("，都有强制缓存，"),a("strong",[t._v("只要缓存的有效时间（xxx秒）没过，就直接读取浏览器缓存")]),t._v("。如果是用户主动刷新页面，会发起http请求资源，有额外的请求消耗，但是如果设置的是immutable即使用户刷新也直接读取浏览器缓存。")])]),t._v(" "),a("p",[a("strong",[t._v("强缓存有两种策略，对应HTTP1.0，和HTTP1.1。")])]),t._v(" "),a("h5",{attrs:{id:"expires策略-http1-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#expires策略-http1-0"}},[t._v("#")]),t._v(" "),a("strong",[t._v("Expires策略（HTTP1.0）")])]),t._v(" "),a("blockquote",[a("p",[t._v("Expires是Web服务器响应消息头字段，在响应http请求时告诉浏览器在过期时间前浏览器可以直接从浏览器缓存取数据，而无需再次请求。\nExpires设置失效时间，精确到时分秒。 不过Expires 是HTTP 1.0的东西，现在默认浏览器均默认使用HTTP 1.1，所以它的作用基本忽略。")])]),t._v(" "),a("h5",{attrs:{id:"cache-control策略-重点关注"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cache-control策略-重点关注"}},[t._v("#")]),t._v(" "),a("strong",[t._v("Cache-control策略（重点关注）")])]),t._v(" "),a("blockquote",[a("p",[t._v("Cache-Control与Expires的作用一致，都是指明当前资源的有效期，控制浏览器是否直接从浏览器缓存取数据还是重新发请求到服务器取数据。只不过Cache-Control的选择更多，设置更细致，如果同时设置的话，其优先级高于Expires。")])]),t._v(" "),a("blockquote",[a("p",[t._v("http协议头Cache-Control ： 值可以是public、private、no-cache、no-store、no-transform、must-revalidate、proxy-revalidate、max-age")])]),t._v(" "),a("h4",{attrs:{id:"_2、协商缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、协商缓存"}},[t._v("#")]),t._v(" 2、协商缓存")]),t._v(" "),a("p",[t._v("客户端会先从"),a("strong",[t._v("缓存数据库中获取到一个缓存数据的标识")]),t._v("，得到标识后请求服务端验证是否失效（新鲜），如果没有失效服务端会返回304，此时客户端直接从缓存中获取所请求的数据，如果标识失效，服务端会返回更新后的数据。")]),t._v(" "),a("blockquote",[a("p",[t._v("关键词：\n"),a("strong",[t._v("协商缓存：200，304，发送请求\nLast-Modifined -> If-Modified-Since 修改时间\nEtag -> If-None-Match 服务器唯一标识")])])]),t._v(" "),a("p",[t._v("当浏览器请求资源时发现缓存过期，就会去请求服务器进行协商缓存。在之前的服务器响应的头部中，还有两个字段与协商缓存有关")]),t._v(" "),a("blockquote",[a("p",[t._v("etag: '5c20abbd-e2e8'\nlast-modified: Mon, 24 Dec 2018 09:49:49 GMT")])]),t._v(" "),a("p",[t._v("etag是一个文件hash，每个文件唯一。")]),t._v(" "),a("p",[t._v("last-modified是文件最后更新的时间。在协商缓存时浏览器的请求会携带这两个字段，服务器会根据这两个标识对比判断文件是否更新，"),a("strong",[t._v("如果发生了更新就会返回200状态码，和第一次请求资源一样；如果没有更新就会返回304，调用浏览器缓存")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"二、服务器是如何判断缓存是否失效"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、服务器是如何判断缓存是否失效"}},[t._v("#")]),t._v(" 二、服务器是如何判断缓存是否失效")]),t._v(" "),a("ul",[a("li",[t._v("与缓存相关的规则信息就包含在相应头中")])]),t._v(" "),a("h4",{attrs:{id:"_1-强缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-强缓存"}},[t._v("#")]),t._v(" "),a("img",{attrs:{src:"http://www.361way.com/wp-content/uploads/2017/01/response-headers.png",alt:"img"}}),t._v("1. 强缓存")]),t._v(" "),a("h5",{attrs:{id:"expires-thu-15-apr-2010-20-00-00-gmt"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#expires-thu-15-apr-2010-20-00-00-gmt"}},[t._v("#")]),t._v(" "),a("strong",[t._v("Expires")]),t._v("：Thu，15 Apr  2010  20：00：00  GMT")]),t._v(" "),a("p",[t._v("由于服务端时间和客户端时间可能有误差，现在都用"),a("strong",[t._v("Cache-Control")])]),t._v(" "),a("h5",{attrs:{id:"cache-control"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cache-control"}},[t._v("#")]),t._v(" "),a("strong",[t._v("Cache-Control")]),t._v("：")]),t._v(" "),a("p",[t._v("Cache-Control有很多属性，不同的属性代表的意义也不同。")]),t._v(" "),a("p",[t._v("private：客户端可以缓存\npublic：客户端和代理服务器都可以缓存\nmax-age=t：缓存内容将在t秒后失效\nno-cache：需要使用协商缓存来验证缓存数据,no-cache代表不缓存过期的资源\nno-store：所有内容都不会缓存。")]),t._v(" "),a("h4",{attrs:{id:"_2-协商缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-协商缓存"}},[t._v("#")]),t._v(" 2. 协商缓存")]),t._v(" "),a("h5",{attrs:{id:"_1-last-modified"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-last-modified"}},[t._v("#")]),t._v(" 1. "),a("strong",[t._v("Last-Modified")])]),t._v(" "),a("p",[t._v("Last-Modified： 服务器在响应请求时，"),a("strong",[t._v("会告诉浏览器资源的最后修改时间")]),t._v("。")]),t._v(" "),a("p",[t._v("if-Modified-Since: 浏览器再次请求服务器的时候，请求头会包含此字段，后面跟着在缓存中获得的最后修改时间。（修改则传数据）")]),t._v(" "),a("p",[t._v("if-Unmodified-Since: 从字面上看, 就是说: 从某个时间点算起, 是否文件没有被修改")]),t._v(" "),a("ul",[a("li",[t._v("这两个的区别是一个是修改了才下载一个是没修改才下载。")]),t._v(" "),a("li",[t._v("Last-Modified 说好却也不是特别好，因为如果在服务器上，一个资源被修改了，但其实际内容根本没发生改变，会因为Last-Modified时间匹配不上而返回了整个实体给客户端（即使客户端缓存里有个一模一样的资源）。为了解决这个问题，HTTP1.1推出了Etag。")])]),t._v(" "),a("h5",{attrs:{id:"_2-etag"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-etag"}},[t._v("#")]),t._v(" 2. "),a("strong",[t._v("Etag")])]),t._v(" "),a("p",[t._v("Etag：服务器响应请求时，通过此字段告诉浏览器当前资源在服务器生成的唯一标识（生成规则由服务器决定）")]),t._v(" "),a("p",[t._v("If-None-Match：再次请求服务器时，浏览器的请求报文头部会包含此字段，后面的值为在缓存中获取的标识。服务器接收到次报文后发现If-None-Match则与被请求资源的唯一标识进行对比。")]),t._v(" "),a("ol",[a("li",[t._v("不同，说明资源被改动过，则响应整个资源内容，返回状态码200。")]),t._v(" "),a("li",[t._v("相同，说明资源无心修改，则响应header，浏览器直接从缓存中获取数据信息。返回状态码304.")])]),t._v(" "),a("p",[t._v("但是实际应用中由于Etag的计算是使用算法来得出的，而算法会占用服务端计算的资源，所有服务端的资源都是宝贵的，所以就很少使用Etag了。")]),t._v(" "),a("h2",{attrs:{id:"三、怎么强制使用协商缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、怎么强制使用协商缓存"}},[t._v("#")]),t._v(" 三、怎么强制使用协商缓存")]),t._v(" "),a("h3",{attrs:{id:"_1-cache-contro-no-coach"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-cache-contro-no-coach"}},[t._v("#")]),t._v(" 1. Cache-Contro：no-coach")]),t._v(" "),a("ul",[a("li",[t._v("（还是会缓存，只不过每一次都要去浏览器判断数据是否更新）")])]),t._v(" "),a("h3",{attrs:{id:"_2-ctrl-f5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-ctrl-f5"}},[t._v("#")]),t._v(" 2. Ctrl+F5")]),t._v(" "),a("h3",{attrs:{id:"_3-expires-0-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-expires-0-1"}},[t._v("#")]),t._v(" 3. Expires = 0 /-1")]),t._v(" "),a("h3",{attrs:{id:"_4-浏览器勾选-disable-cache"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-浏览器勾选-disable-cache"}},[t._v("#")]),t._v(" 4. 浏览器勾选：disable cache")]),t._v(" "),a("h2",{attrs:{id:"四、缓存的优点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、缓存的优点"}},[t._v("#")]),t._v(" 四、缓存的优点")]),t._v(" "),a("ol",[a("li",[t._v("减少了冗余的数据传递，节省宽带流量")]),t._v(" "),a("li",[t._v("减少了服务器的负担，大大提高了网站性能")]),t._v(" "),a("li",[t._v("加快了客户端加载网页的速度 ------- 这也正是HTTP缓存属于客户端缓存的原因。")])]),t._v(" "),a("h2",{attrs:{id:"五、不同刷新的请求执行过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、不同刷新的请求执行过程"}},[t._v("#")]),t._v(" 五、不同刷新的请求执行过程")]),t._v(" "),a("ol",[a("li",[t._v("浏览器地址栏中写入URL，回车\n浏览器发现缓存中有这个文件了，不用继续请求了，直接去缓存拿。（最快）")]),t._v(" "),a("li",[t._v("F5\nF5就是告诉浏览器，别偷懒，好歹去服务器看看这个文件是否有过期了。于是浏览器就胆胆襟襟的发送一个请求带上If-Modify-since。")]),t._v(" "),a("li",[t._v("Ctrl+F5\n告诉浏览器，你先把你缓存中的这个文件给我删了，然后再去服务器请求个完整的资源文件下来。于是客户端就完成了强行更新的操作.")])])])}),[],!1,null,null,null);a.default=e.exports}}]);