(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{361:function(t,e,r){"use strict";r.r(e);var v=r(14),o=Object(v.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("ul",[e("li",[t._v("断点调试用法总结我根据端的不同，分为了浏览器端、Vscode、微信小程序。")])]),t._v(" "),e("h1",{attrs:{id:"chrome浏览器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#chrome浏览器"}},[t._v("#")]),t._v(" Chrome浏览器")]),t._v(" "),e("p",[t._v("总结自："),e("a",{attrs:{href:"https://www.jianshu.com/p/e6ba1fee8e7d",target:"_blank",rel:"noopener noreferrer"}},[t._v("使用断点调试代码"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://segmentfault.com/a/1190000005113673",target:"_blank",rel:"noopener noreferrer"}},[t._v("js断点调试心得（以chrome浏览器为例）"),e("OutboundLink")],1)]),t._v(" "),e("blockquote",[e("p",[t._v("首先，我们还是先对断点的类型进行分类，何时使用何种类型的断点：")]),t._v(" "),e("p",[e("strong",[t._v("Line-of-code")]),t._v("： 运行到DevTools代码里要打点的具体区域；")]),t._v(" "),e("p",[e("strong",[t._v("Conditional line-of-code")]),t._v(" ： 知道在DevTools代码里要打点的具体区域且设置条件，只有为真才执行断点操作；")]),t._v(" "),e("p",[e("strong",[t._v("DOM")]),t._v("： 在 body 中添加，检测节点或其子节点的增删和属性变化；")]),t._v(" "),e("p",[e("strong",[t._v("XHR")]),t._v("： 在 xhr url 包含特定内容的时候打点；")]),t._v(" "),e("p",[e("strong",[t._v("Event listener")]),t._v("： 在触发特定事件的时候打点；")]),t._v(" "),e("p",[e("strong",[t._v("Exception")]),t._v("： 在抛出异常的时候打点；")]),t._v(" "),e("p",[e("strong",[t._v("Function")]),t._v("： 在特定函数被调用的时候打点；")]),t._v(" "),e("p",[e("strong",[t._v("debugger")]),t._v("： 在书写的代码里希望打点的时候手动打点；\n作者：威少_吴\n链接：https://www.jianshu.com/p/e6ba1fee8e7d\n来源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。")])]),t._v(" "),e("h2",{attrs:{id:"line-of-code-breakpoints-解析到打点的代码之前"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#line-of-code-breakpoints-解析到打点的代码之前"}},[t._v("#")]),t._v(" "),e("strong",[t._v("Line-of-code breakpoints（解析到打点的代码之前）")])]),t._v(" "),e("p",[t._v("浏览器会执行解析操作到打点的那行代码之前（不包含那行代码）。")]),t._v(" "),e("p",[t._v("操作： f12 -> "),e("strong",[t._v("Sources -")]),t._v("> 双击打开需要打点的文件 -> 找到需要打点的那行代码 -> 在行数上单击，出现一个蓝色标记，打点完成。")]),t._v(" "),e("p",[t._v("在标记上再次单击，会删除当前断点。（"),e("em",[e("strong",[t._v("在代码中输入 debugger 同样能在指定位置暂停）")])])]),t._v(" "),e("ul",[e("li",[t._v("这是我比较常用的一种调试方式。打好断点之后，重新运行程序，然后我就可以在特定的断开，然后在左下角看当前作用域里面的数据。")])]),t._v(" "),e("h2",{attrs:{id:"conditional-line-of-code-breakpoints-条件判断"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#conditional-line-of-code-breakpoints-条件判断"}},[t._v("#")]),t._v(" "),e("strong",[t._v("Conditional line-of-code breakpoints（条件判断）")])]),t._v(" "),e("p",[t._v("操作： f12 -> "),e("strong",[t._v("Sources")]),t._v(" -> 双击打开需要打点的文件 -> 找到需要打点的那行代码 -> 右键行数，选择 "),e("strong",[t._v("Add conditional breakpoint")]),t._v(" -> 在出现的对话框中输入条件 -> 点击 enter，出现橙色标志，打点完成。")]),t._v(" "),e("h2",{attrs:{id:"dom-change-breakpoints-观察dom节点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dom-change-breakpoints-观察dom节点"}},[t._v("#")]),t._v(" "),e("strong",[t._v("DOM change breakpoints（观察DOM节点）")])]),t._v(" "),e("p",[t._v("在文档节点发生变化的时候暂停。")]),t._v(" "),e("p",[t._v("操作： f12 -> "),e("strong",[t._v("Elements")]),t._v(" -> 点击希望监测的节点 -> 右击节点 -> 在出现的菜单上选择 Break on -> 按需要选择 "),e("strong",[t._v("Subtree modifications")]),t._v(","),e("strong",[t._v("Attribute modifications")]),t._v(", "),e("strong",[t._v("Node removal。")])]),t._v(" "),e("p",[t._v("dom 改变断点类型：")]),t._v(" "),e("p",[t._v("●  "),e("strong",[t._v("Subtree modifications ， 在当前节点的*子节点*发生增加、移除、内容改变、交换顺序的情况的时候生效。其他情况例如当前节点发生了变化，或者子节点的属性发生了变化都不会触发。")])]),t._v(" "),e("p",[t._v("●  "),e("strong",[t._v("Attributes modifications ， 在当前节点的属性发生变化，例如增加属性、移除属性、属性值改变 的时候触发。")]),t._v("**\n**")]),t._v(" "),e("p",[t._v("●  "),e("strong",[t._v("Node Removal ， 在当前节点被移除的时候触发。")])]),t._v(" "),e("h2",{attrs:{id:"xhr-breakpoints-监听xhr请求"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#xhr-breakpoints-监听xhr请求"}},[t._v("#")]),t._v(" "),e("strong",[t._v("XHR breakpoints (监听xhr请求）")])]),t._v(" "),e("p",[t._v("在你希望监听特定的 xhr 请求的时候，使用 xhr breakpoints 。 指定特定的字符串，当有包含此字符串的 xhr url 出现时触发，DevTools 会在 xhr.send() 方法被调用的地方暂停。")]),t._v(" "),e("p",[t._v("xhr breakpoints 对 fetch 请求也有效。")]),t._v(" "),e("p",[t._v("对于一些被封装好了的 xhr 请求例如 JQuery 的 ajax 方法，浏览器无法定位到被调用的地方。")]),t._v(" "),e("p",[t._v("操作： f12 -> Source Tab -> "),e("strong",[t._v("XHR Breakpoints 面板")]),t._v(" -> 点击 + 号 -> 在出现的对话框里输入指定的字符串，浏览器会在出现包含此字符串的 xhr 请求时暂停（无论字符串在 url 的哪个位置） -> enter ， 完成断点。")]),t._v(" "),e("blockquote",[e("h2",{attrs:{id:"管理断点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#管理断点"}},[t._v("#")]),t._v(" 管理断点")]),t._v(" "),e("p",[t._v("另外，可以在 BreakPoints (不是下面的XHR Breakpoints)面板上统一管理所有的断点。")])]),t._v(" "),e("h2",{attrs:{id:"event-listener-breakpoints-监听事件-如click"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#event-listener-breakpoints-监听事件-如click"}},[t._v("#")]),t._v(" "),e("strong",[t._v("Event listener breakpoints（监听事件,如click）")])]),t._v(" "),e("p",[t._v("监测事件，在事件发生后暂停，断点到事件绑定的位置。支持单独的事件例如 "),e("strong",[t._v("click ， 也支持一整个类别的事件，例如所有的鼠标事件。")])]),t._v(" "),e("p",[t._v("操作： f12 -> Source Tab -> 展开 **Event Listener Breakpoints 面板，**会列出所有能监听的事件 -> 全选或展开之后单独选事件，完成断点。")]),t._v(" "),e("h2",{attrs:{id:"function-breakpoints-监听具体的function"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#function-breakpoints-监听具体的function"}},[t._v("#")]),t._v(" "),e("strong",[t._v("Function breakpoints（监听具体的Function）")])]),t._v(" "),e("p",[e("strong",[t._v("有两种方法：")])]),t._v(" "),e("p",[t._v("一：代码里插入：")]),t._v(" "),e("blockquote",[e("p",[t._v("function sum(a,b){")]),t._v(" "),e("p",[t._v("let result = a+b; // 浏览器在这里暂停")]),t._v(" "),e("p",[t._v("return result;")]),t._v(" "),e("p",[t._v("};")]),t._v(" "),e("p",[t._v("debug (sum); // 参数是一个函数，不是字符串")]),t._v(" "),e("p",[t._v("sum();")])]),t._v(" "),e("p",[t._v("二：控制台调用：")]),t._v(" "),e("p",[t._v("控制台输入debug(sum)，点击 enter，再触发一次 sum 操作，就进入断点页面。")]),t._v(" "),e("p",[t._v("要注意确保目标函数与 debug 函数在同一个作用域里面，否则会报 ReferenceError：（所以我个人不建议这么使用，经常会出现不同一个作用域的情况。）")]),t._v(" "),e("h2",{attrs:{id:"exception-breakpoints-监听error事件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#exception-breakpoints-监听error事件"}},[t._v("#")]),t._v(" "),e("strong",[t._v("Exception breakpoints（监听error事件）")])]),t._v(" "),e("p",[t._v("当我们想在某一行抛出caught or uncaught异常时进入断点，可以使用exception breakpoint。")]),t._v(" "),e("ul",[e("li",[t._v("1.单击Sources tab")]),t._v(" "),e("li",[t._v("2.单击Pause on exceptions上，也就是")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://segmentfault.com/img/remote/1460000016671722",alt:"image"}}),t._v("变蓝了就表示开启了，此时默认有未捕获的异常时进入断点。")]),t._v(" "),e("ul",[e("li",[t._v("3.选中Pause On Caught Exceptions，可以使得捕获的异常也进入断点。")])]),t._v(" "),e("h4",{attrs:{id:"什么是caught和uncaught的exception"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是caught和uncaught的exception"}},[t._v("#")]),t._v(" 什么是caught和uncaught的exception？")]),t._v(" "),e("ul",[e("li",[t._v("通过throw，catch对exception做处理的，属于caught exception")]),t._v(" "),e("li",[t._v("没有对异常做捕获的exception，可能导致程序崩溃的exception，就属于uncaught exception")])]),t._v(" "),e("p",[t._v("默认捕获的异常时uncaught类型，开启Pause on caught exceptions，会让uncaught和caught类型的均进入断点。")]),t._v(" "),e("h2",{attrs:{id:"按钮相关"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#按钮相关"}},[t._v("#")]),t._v(" "),e("strong",[t._v("按钮相关")])]),t._v(" "),e("p",[t._v("说完debug方法有几种，接下来再说一下一些按钮的具体用法吧。")]),t._v(" "),e("h3",{attrs:{id:"一-两个小符号"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一-两个小符号"}},[t._v("#")]),t._v(" 一：两个小符号")]),t._v(" "),e("p",[t._v("首先说一下右边的小箭头，这个小图标的功能叫“逐语句执行”或者叫“"),e("strong",[t._v("逐步执行")]),t._v("”，每点击它一次，js语句就会往后执行一句，它还有一个快捷键，F10。")]),t._v(" "),e("p",[t._v("以"),e("strong",[t._v("断点为步长")]),t._v("执行代码（注意，下一步也可能是当前断点处)，快捷键F8；")]),t._v(" "),e("h3",{attrs:{id:"二-观察变量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二-观察变量"}},[t._v("#")]),t._v(" 二：观察变量")]),t._v(" "),e("p",[t._v("如果在调试过程中想"),e("strong",[t._v("观察某个变量的动态变化")]),t._v("，选中该变量并“Add selected text to watches”，即可在右侧watch出监视该变量（也可以点“+”输入变量名添加）。（常用在循环、以及一些中间量）")]),t._v(" "),e("h1",{attrs:{id:"vscode"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vscode"}},[t._v("#")]),t._v(" Vscode")]),t._v(" "),e("p",[t._v("在看完chrome浏览器的调试用法，我想再总结一下Vscode的断点调试。主要是因为现在webpack打包流行，但是编译后的代码找起来却没有那么容易了，遇到bug打断点找不到代码就成了前端一个痛点。最好的解决办法就是在vscode里面直接debug。")]),t._v(" "),e("ol",[e("li",[t._v("首先下载插件Debugger for Chrome")]),t._v(" "),e("li",[t._v("在调试面板创建launch.json文件。然后选择Chrome。（因为我的项目是Web端的）")]),t._v(" "),e("li",[t._v("如果是webpack之类的文件，需要先运行起来，我是测试用，所以我会 "),e("code",[t._v("npm run dev")]),t._v("。")])])])}),[],!1,null,null,null);e.default=o.exports}}]);